/* THIS FILE WAS AUTO GENERATED BY codegen-maven-plugin, DO NOT EDIT IT */
package org.unidal.agent.mixin.model.transform;

import java.util.ArrayList;
import java.util.List;
import org.unidal.agent.mixin.model.entity.ClassModel;
import org.unidal.agent.mixin.model.entity.FieldModel;
import org.unidal.agent.mixin.model.entity.InnerClassModel;
import org.unidal.agent.mixin.model.entity.MethodModel;
import org.unidal.agent.mixin.model.entity.MixinModel;
import org.unidal.agent.mixin.model.entity.SourceModel;
import org.unidal.agent.mixin.model.entity.TargetModel;

public class DefaultLinker implements ILinker {
   @SuppressWarnings("unused")
   private boolean m_deferrable;

   private List<Runnable> m_deferedJobs = new ArrayList<Runnable>();

   public DefaultLinker(boolean deferrable) {
      m_deferrable = deferrable;
   }

   public void finish() {
      for (Runnable job : m_deferedJobs) {
         job.run();
      }
   }

   @Override
   public boolean onClass(final MixinModel parent, final ClassModel _class) {
      parent.addClass(_class);
      return true;
   }

   @Override
   public boolean onField(final TargetModel parent, final FieldModel field) {
      parent.addField(field);
      return true;
   }

   @Override
   public boolean onField(final SourceModel parent, final FieldModel field) {
      parent.addField(field);
      return true;
   }

   @Override
   public boolean onInnerClass(final TargetModel parent, final InnerClassModel innerClass) {
      parent.addInnerClass(innerClass);
      return true;
   }

   @Override
   public boolean onInnerClass(final SourceModel parent, final InnerClassModel innerClass) {
      parent.addInnerClass(innerClass);
      return true;
   }

   @Override
   public boolean onMethod(final TargetModel parent, final MethodModel method) {
      parent.addMethod(method);
      return true;
   }

   @Override
   public boolean onMethod(final SourceModel parent, final MethodModel method) {
      parent.addMethod(method);
      return true;
   }

   @Override
   public boolean onSource(final ClassModel parent, final SourceModel source) {
      parent.addSource(source);
      return true;
   }

   @Override
   public boolean onTarget(final ClassModel parent, final TargetModel target) {
      parent.setTarget(target);
      return true;
   }
}
