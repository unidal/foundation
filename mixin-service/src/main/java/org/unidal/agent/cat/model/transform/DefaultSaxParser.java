/* THIS FILE WAS AUTO GENERATED BY codegen-maven-plugin, DO NOT EDIT IT */
package org.unidal.agent.cat.model.transform;

import static org.unidal.agent.cat.model.Constants.ELEMENT_KEY;
import static org.unidal.agent.cat.model.Constants.ELEMENT_KEYS;
import static org.unidal.agent.cat.model.Constants.ELEMENT_SUCCESS;
import static org.unidal.agent.cat.model.Constants.ELEMENT_SUCCESSES;
import static org.unidal.agent.cat.model.Constants.ELEMENT_VALUE;
import static org.unidal.agent.cat.model.Constants.ELEMENT_VALUES;

import static org.unidal.agent.cat.model.Constants.ENTITY_CLASS;
import static org.unidal.agent.cat.model.Constants.ENTITY_EVENT;
import static org.unidal.agent.cat.model.Constants.ENTITY_INSTRUMENT;
import static org.unidal.agent.cat.model.Constants.ENTITY_METHOD;
import static org.unidal.agent.cat.model.Constants.ENTITY_TRANSACTION;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.Stack;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import org.unidal.agent.cat.model.IEntity;
import org.unidal.agent.cat.model.entity.ClassModel;
import org.unidal.agent.cat.model.entity.EventModel;
import org.unidal.agent.cat.model.entity.InstrumentModel;
import org.unidal.agent.cat.model.entity.MethodModel;
import org.unidal.agent.cat.model.entity.TransactionModel;

public class DefaultSaxParser extends DefaultHandler {

   private DefaultLinker m_linker = new DefaultLinker(true);

   private DefaultSaxMaker m_maker = new DefaultSaxMaker();

   private Stack<String> m_tags = new Stack<String>();

   private Stack<Object> m_objs = new Stack<Object>();

   private IEntity<?> m_entity;

   private StringBuilder m_text = new StringBuilder();

   public static InstrumentModel parse(InputStream in) throws SAXException, IOException {
      return parseEntity(InstrumentModel.class, in);
   }

   public static InstrumentModel parse(Reader reader) throws SAXException, IOException {
      return parseEntity(InstrumentModel.class, reader);
   }

   public static InstrumentModel parse(String xml) throws SAXException, IOException {
      return parseEntity(InstrumentModel.class, xml);
   }

   @SuppressWarnings("unchecked")
   private static <T extends IEntity<?>> T parseEntity(Class<T> type, InputSource is) throws SAXException, IOException {
      try {
         DefaultSaxParser parser = new DefaultSaxParser();
         SAXParserFactory factory = SAXParserFactory.newInstance();

         factory.setValidating(false);
         factory.setFeature("http://xml.org/sax/features/validation", false);

         factory.newSAXParser().parse(is, parser);
         parser.m_linker.finish();
         return (T) parser.getEntity();
      } catch (ParserConfigurationException e) {
         throw new IllegalStateException("Unable to get SAX parser instance!", e);
      }
   }

   public static <T extends IEntity<?>> T parseEntity(Class<T> type, InputStream in) throws SAXException, IOException {
      return parseEntity(type, new InputSource(removeBOM(in)));
   }

   public static <T extends IEntity<?>> T parseEntity(Class<T> type, Reader reader) throws SAXException, IOException {
      return parseEntity(type, new InputSource(removeBOM(reader)));
   }

   public static <T extends IEntity<?>> T parseEntity(Class<T> type, String xml) throws SAXException, IOException {
      return parseEntity(type, new InputSource(new StringReader(removeBOM(xml))));
   }

   // to remove Byte Order Mark(BOM) at the head of windows utf-8 file
   @SuppressWarnings("unchecked")
   private static <T> T removeBOM(T obj) throws IOException {
      if (obj instanceof String) {
         String str = (String) obj;

         if (str.length() != 0 && str.charAt(0) == 0xFEFF) {
            return (T) str.substring(1);
         } else {
            return obj;
         }
      } else if (obj instanceof InputStream) {
         BufferedInputStream in = new BufferedInputStream((InputStream) obj);

         in.mark(3);

         if (in.read() != 0xEF || in.read() != 0xBB || in.read() != 0xBF) {
            in.reset();
         }

         return (T) in;
      } else if (obj instanceof Reader) {
         BufferedReader in = new BufferedReader((Reader) obj);

         in.mark(1);

         if (in.read() != 0xFEFF) {
            in.reset();
         }

         return (T) in;
      } else {
         return obj;
      }
   }

   @SuppressWarnings("unchecked")
   protected <T> T convert(Class<T> type, String value, T defaultValue) {
      if (value == null || value.length() == 0) {
         return defaultValue;
      }

      if (type == Boolean.class) {
         return (T) Boolean.valueOf(value);
      } else if (type == Integer.class) {
         return (T) Integer.valueOf(value);
      } else if (type == Long.class) {
         return (T) Long.valueOf(value);
      } else if (type == Short.class) {
         return (T) Short.valueOf(value);
      } else if (type == Float.class) {
         return (T) Float.valueOf(value);
      } else if (type == Double.class) {
         return (T) Double.valueOf(value);
      } else if (type == Byte.class) {
         return (T) Byte.valueOf(value);
      } else if (type == Character.class) {
         return (T) (Character) value.charAt(0);
      } else {
         return (T) value;
      }
   }

   @Override
   public void characters(char[] ch, int start, int length) throws SAXException {
      m_text.append(ch, start, length);
   }

   @Override
   public void endElement(String uri, String localName, String qName) throws SAXException {
      if (uri == null || uri.length() == 0) {
         Object currentObj = m_objs.pop();
         String currentTag = m_tags.pop();

         if (currentObj instanceof TransactionModel) {
            TransactionModel transaction = (TransactionModel) currentObj;

            if (ELEMENT_KEY.equals(currentTag)) {
               transaction.addKey(getText());
            } else if (ELEMENT_VALUE.equals(currentTag)) {
               transaction.addValue(getText());
            } else if (ELEMENT_SUCCESS.equals(currentTag)) {
               transaction.addSuccess(convert(Integer.class, getText(), null));
            }
         } else if (currentObj instanceof EventModel) {
            EventModel event = (EventModel) currentObj;

            if (ELEMENT_KEY.equals(currentTag)) {
               event.addKey(getText());
            } else if (ELEMENT_VALUE.equals(currentTag)) {
               event.addValue(getText());
            } else if (ELEMENT_SUCCESS.equals(currentTag)) {
               event.addSuccess(convert(Integer.class, getText(), null));
            }
         }
      }

      m_text.setLength(0);
   }

   private IEntity<?> getEntity() {
      return m_entity;
   }

   protected String getText() {
      return m_text.toString();
   }

   private void parseForClass(ClassModel parentObj, String parentTag, String qName, Attributes attributes) throws SAXException {
      if (ENTITY_METHOD.equals(qName)) {
         MethodModel method = m_maker.buildMethod(attributes);

         m_linker.onMethod(parentObj, method);
         m_objs.push(method);
      } else {
         throw new SAXException(String.format("Element(%s) is not expected under class!", qName));
      }

      m_tags.push(qName);
   }

   private void parseForEvent(EventModel parentObj, String parentTag, String qName, Attributes attributes) throws SAXException {
      if (ELEMENT_KEYS.equals(qName) || ELEMENT_KEY.equals(qName) || ELEMENT_VALUES.equals(qName) || ELEMENT_VALUE.equals(qName) || ELEMENT_SUCCESSES.equals(qName) || ELEMENT_SUCCESS.equals(qName)) {
         m_objs.push(parentObj);
      } else {
         throw new SAXException(String.format("Element(%s) is not expected under event!", qName));
      }

      m_tags.push(qName);
   }

   private void parseForInstrument(InstrumentModel parentObj, String parentTag, String qName, Attributes attributes) throws SAXException {
      if (ENTITY_CLASS.equals(qName)) {
         ClassModel class_ = m_maker.buildClass(attributes);

         m_linker.onClass(parentObj, class_);
         m_objs.push(class_);
      } else {
         throw new SAXException(String.format("Element(%s) is not expected under instrument!", qName));
      }

      m_tags.push(qName);
   }

   private void parseForMethod(MethodModel parentObj, String parentTag, String qName, Attributes attributes) throws SAXException {
      if (ENTITY_TRANSACTION.equals(qName)) {
         TransactionModel transaction = m_maker.buildTransaction(attributes);

         m_linker.onTransaction(parentObj, transaction);
         m_objs.push(transaction);
      } else if (ENTITY_EVENT.equals(qName)) {
         EventModel event = m_maker.buildEvent(attributes);

         m_linker.onEvent(parentObj, event);
         m_objs.push(event);
      } else {
         throw new SAXException(String.format("Element(%s) is not expected under method!", qName));
      }

      m_tags.push(qName);
   }

   private void parseForTransaction(TransactionModel parentObj, String parentTag, String qName, Attributes attributes) throws SAXException {
      if (ELEMENT_KEYS.equals(qName) || ELEMENT_KEY.equals(qName) || ELEMENT_VALUES.equals(qName) || ELEMENT_VALUE.equals(qName) || ELEMENT_SUCCESSES.equals(qName) || ELEMENT_SUCCESS.equals(qName)) {
         m_objs.push(parentObj);
      } else {
         throw new SAXException(String.format("Element(%s) is not expected under transaction!", qName));
      }

      m_tags.push(qName);
   }

   private void parseRoot(String qName, Attributes attributes) throws SAXException {
      if (ENTITY_INSTRUMENT.equals(qName)) {
         InstrumentModel instrument = m_maker.buildInstrument(attributes);

         m_entity = instrument;
         m_objs.push(instrument);
         m_tags.push(qName);
      } else if (ENTITY_CLASS.equals(qName)) {
         ClassModel _class = m_maker.buildClass(attributes);

         m_entity = _class;
         m_objs.push(_class);
         m_tags.push(qName);
      } else if (ENTITY_METHOD.equals(qName)) {
         MethodModel method = m_maker.buildMethod(attributes);

         m_entity = method;
         m_objs.push(method);
         m_tags.push(qName);
      } else if (ENTITY_TRANSACTION.equals(qName)) {
         TransactionModel transaction = m_maker.buildTransaction(attributes);

         m_entity = transaction;
         m_objs.push(transaction);
         m_tags.push(qName);
      } else if (ENTITY_EVENT.equals(qName)) {
         EventModel event = m_maker.buildEvent(attributes);

         m_entity = event;
         m_objs.push(event);
         m_tags.push(qName);
      } else {
         throw new SAXException("Unknown root element(" + qName + ") found!");
      }
   }

   @Override
   public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
      if (uri == null || uri.length() == 0) {
         if (m_objs.isEmpty()) { // root
            parseRoot(qName, attributes);
         } else {
            Object parent = m_objs.peek();
            String tag = m_tags.peek();

            if (parent instanceof InstrumentModel) {
               parseForInstrument((InstrumentModel) parent, tag, qName, attributes);
            } else if (parent instanceof ClassModel) {
               parseForClass((ClassModel) parent, tag, qName, attributes);
            } else if (parent instanceof MethodModel) {
               parseForMethod((MethodModel) parent, tag, qName, attributes);
            } else if (parent instanceof TransactionModel) {
               parseForTransaction((TransactionModel) parent, tag, qName, attributes);
            } else if (parent instanceof EventModel) {
               parseForEvent((EventModel) parent, tag, qName, attributes);
            } else {
               throw new RuntimeException(String.format("Unknown entity(%s) under %s!", qName, parent.getClass().getName()));
            }
         }

         m_text.setLength(0);
        } else {
         throw new SAXException(String.format("Namespace(%s) is not supported by %s.", uri, this.getClass().getName()));
      }
   }
}
