/* THIS FILE WAS AUTO GENERATED BY codegen-maven-plugin, DO NOT EDIT IT */
package org.unidal.mixin.model.transform;

import static org.unidal.mixin.model.Constants.ATTR_ACCESS;
import static org.unidal.mixin.model.Constants.ATTR_CLASS;
import static org.unidal.mixin.model.Constants.ATTR_DESC;
import static org.unidal.mixin.model.Constants.ATTR_INNER_NAME;
import static org.unidal.mixin.model.Constants.ATTR_NAME;
import static org.unidal.mixin.model.Constants.ATTR_OUTER_NAME;
import static org.unidal.mixin.model.Constants.ATTR_SOURCE_CLASS;
import static org.unidal.mixin.model.Constants.ATTR_SOURCE_NAME;
import static org.unidal.mixin.model.Constants.ATTR_SOURCE_OUTER_NAME;
import static org.unidal.mixin.model.Constants.ATTR_SUPER_NAME;

import org.xml.sax.Attributes;

import org.unidal.mixin.model.entity.ClassModel;
import org.unidal.mixin.model.entity.FieldModel;
import org.unidal.mixin.model.entity.InnerClassModel;
import org.unidal.mixin.model.entity.MethodModel;
import org.unidal.mixin.model.entity.MixinModel;
import org.unidal.mixin.model.entity.SourceModel;
import org.unidal.mixin.model.entity.TargetModel;

public class DefaultSaxMaker implements IMaker<Attributes> {

   @Override
   public ClassModel buildClass(Attributes attributes) {
      String _class = attributes.getValue(ATTR_CLASS);
      ClassModel class_ = new ClassModel(_class);

      return class_;
   }

   @Override
   public FieldModel buildField(Attributes attributes) {
      String access = attributes.getValue(ATTR_ACCESS);
      String name = attributes.getValue(ATTR_NAME);
      String desc = attributes.getValue(ATTR_DESC);
      String sourceName = attributes.getValue(ATTR_SOURCE_NAME);
      String sourceClass = attributes.getValue(ATTR_SOURCE_CLASS);
      FieldModel field = new FieldModel(name);

      if (access != null) {
         field.setAccess(convert(Integer.class, access, null));
      }

      if (desc != null) {
         field.setDesc(desc);
      }

      if (sourceName != null) {
         field.setSourceName(sourceName);
      }

      if (sourceClass != null) {
         field.setSourceClass(sourceClass);
      }

      return field;
   }

   @Override
   public InnerClassModel buildInnerClass(Attributes attributes) {
      String access = attributes.getValue(ATTR_ACCESS);
      String name = attributes.getValue(ATTR_NAME);
      String outerName = attributes.getValue(ATTR_OUTER_NAME);
      String innerName = attributes.getValue(ATTR_INNER_NAME);
      String sourceName = attributes.getValue(ATTR_SOURCE_NAME);
      String sourceOuterName = attributes.getValue(ATTR_SOURCE_OUTER_NAME);
      InnerClassModel innerClass = new InnerClassModel(name);

      if (access != null) {
         innerClass.setAccess(convert(Integer.class, access, null));
      }

      if (outerName != null) {
         innerClass.setOuterName(outerName);
      }

      if (innerName != null) {
         innerClass.setInnerName(innerName);
      }

      if (sourceName != null) {
         innerClass.setSourceName(sourceName);
      }

      if (sourceOuterName != null) {
         innerClass.setSourceOuterName(sourceOuterName);
      }

      return innerClass;
   }

   @Override
   public MethodModel buildMethod(Attributes attributes) {
      String access = attributes.getValue(ATTR_ACCESS);
      String name = attributes.getValue(ATTR_NAME);
      String superName = attributes.getValue(ATTR_SUPER_NAME);
      String sourceName = attributes.getValue(ATTR_SOURCE_NAME);
      String sourceClass = attributes.getValue(ATTR_SOURCE_CLASS);
      String desc = attributes.getValue(ATTR_DESC);
      MethodModel method = new MethodModel(name);

      if (access != null) {
         method.setAccess(convert(Integer.class, access, null));
      }

      if (superName != null) {
         method.setSuperName(superName);
      }

      if (sourceName != null) {
         method.setSourceName(sourceName);
      }

      if (sourceClass != null) {
         method.setSourceClass(sourceClass);
      }

      if (desc != null) {
         method.setDesc(desc);
      }

      return method;
   }

   @Override
   public MixinModel buildMixin(Attributes attributes) {
      MixinModel mixin = new MixinModel();

      return mixin;
   }

   @Override
   public SourceModel buildSource(Attributes attributes) {
      String name = attributes.getValue(ATTR_NAME);
      String _class = attributes.getValue(ATTR_CLASS);
      SourceModel source = new SourceModel(name);

      if (_class != null) {
         source.setClazz(_class);
      }

      return source;
   }

   @Override
   public TargetModel buildTarget(Attributes attributes) {
      String name = attributes.getValue(ATTR_NAME);
      TargetModel target = new TargetModel(name);

      return target;
   }

   @SuppressWarnings("unchecked")
   protected <T> T convert(Class<T> type, String value, T defaultValue) {
      if (value == null || value.length() == 0) {
         return defaultValue;
      }

      if (type == Boolean.class || type == Boolean.TYPE) {
         return (T) Boolean.valueOf(value);
      } else if (type == Integer.class || type == Integer.TYPE) {
         return (T) Integer.valueOf(value);
      } else if (type == Long.class || type == Long.TYPE) {
         return (T) Long.valueOf(value);
      } else if (type == Short.class || type == Short.TYPE) {
         return (T) Short.valueOf(value);
      } else if (type == Float.class || type == Float.TYPE) {
         return (T) Float.valueOf(value);
      } else if (type == Double.class || type == Double.TYPE) {
         return (T) Double.valueOf(value);
      } else if (type == Byte.class || type == Byte.TYPE) {
         return (T) Byte.valueOf(value);
      } else if (type == Character.class || type == Character.TYPE) {
         return (T) (Character) value.charAt(0);
      } else {
         return (T) value;
      }
   }
}
