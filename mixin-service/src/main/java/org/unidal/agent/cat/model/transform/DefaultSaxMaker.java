/* THIS FILE WAS AUTO GENERATED BY codegen-maven-plugin, DO NOT EDIT IT */
package org.unidal.agent.cat.model.transform;

import static org.unidal.agent.cat.model.Constants.ATTR_DESC;
import static org.unidal.agent.cat.model.Constants.ATTR_ENABLED;
import static org.unidal.agent.cat.model.Constants.ATTR_NAME;
import static org.unidal.agent.cat.model.Constants.ATTR_ORIGIN_NAME;
import static org.unidal.agent.cat.model.Constants.ATTR_TYPE;

import org.xml.sax.Attributes;

import org.unidal.agent.cat.model.entity.ClassModel;
import org.unidal.agent.cat.model.entity.EventModel;
import org.unidal.agent.cat.model.entity.MethodModel;
import org.unidal.agent.cat.model.entity.RootModel;
import org.unidal.agent.cat.model.entity.TransactionModel;

public class DefaultSaxMaker implements IMaker<Attributes> {

   @Override
   public ClassModel buildClass(Attributes attributes) {
      String name = attributes.getValue(ATTR_NAME);
      String originName = attributes.getValue(ATTR_ORIGIN_NAME);
      String enabled = attributes.getValue(ATTR_ENABLED);
      ClassModel class_ = new ClassModel(name);

      if (originName != null) {
         class_.setOriginName(originName);
      }

      if (enabled != null) {
         class_.setEnabled(convert(Boolean.class, enabled, null));
      }

      return class_;
   }

   @Override
   public EventModel buildEvent(Attributes attributes) {
      String type = attributes.getValue(ATTR_TYPE);
      String name = attributes.getValue(ATTR_NAME);
      EventModel event = new EventModel();

      if (type != null) {
         event.setType(type);
      }

      if (name != null) {
         event.setName(name);
      }

      return event;
   }

   @Override
   public String buildKey(Attributes attributes) {
      throw new UnsupportedOperationException();
   }

   @Override
   public MethodModel buildMethod(Attributes attributes) {
      String name = attributes.getValue(ATTR_NAME);
      String desc = attributes.getValue(ATTR_DESC);
      MethodModel method = new MethodModel(name, desc);

      return method;
   }

   @Override
   public RootModel buildRoot(Attributes attributes) {
      RootModel root = new RootModel();

      return root;
   }

   @Override
   public Integer buildSuccess(Attributes attributes) {
      throw new UnsupportedOperationException();
   }

   @Override
   public TransactionModel buildTransaction(Attributes attributes) {
      String type = attributes.getValue(ATTR_TYPE);
      String name = attributes.getValue(ATTR_NAME);
      TransactionModel transaction = new TransactionModel();

      if (type != null) {
         transaction.setType(type);
      }

      if (name != null) {
         transaction.setName(name);
      }

      return transaction;
   }

   @Override
   public String buildValue(Attributes attributes) {
      throw new UnsupportedOperationException();
   }

   @SuppressWarnings("unchecked")
   protected <T> T convert(Class<T> type, String value, T defaultValue) {
      if (value == null || value.length() == 0) {
         return defaultValue;
      }

      if (type == Boolean.class || type == Boolean.TYPE) {
         return (T) Boolean.valueOf(value);
      } else if (type == Integer.class || type == Integer.TYPE) {
         return (T) Integer.valueOf(value);
      } else if (type == Long.class || type == Long.TYPE) {
         return (T) Long.valueOf(value);
      } else if (type == Short.class || type == Short.TYPE) {
         return (T) Short.valueOf(value);
      } else if (type == Float.class || type == Float.TYPE) {
         return (T) Float.valueOf(value);
      } else if (type == Double.class || type == Double.TYPE) {
         return (T) Double.valueOf(value);
      } else if (type == Byte.class || type == Byte.TYPE) {
         return (T) Byte.valueOf(value);
      } else if (type == Character.class || type == Character.TYPE) {
         return (T) (Character) value.charAt(0);
      } else {
         return (T) value;
      }
   }
}
